<?xml version="1.0"?>
<doc>
    <assembly>
        <name>backend</name>
    </assembly>
    <members>
        <member name="M:AuthenticationController.Login">
            <summary>
            Check user's credentials
            </summary>
            <remarks>
            inputs:-
            username,
            password,
            </remarks>
            <response code="200">User Authenticated and JWT session created</response>
            <response code="401">Unauthorized User</response>
            <response code="422">Body is null</response>
            <response code="500">internal server error</response>
        </member>
        <member name="M:PostsController.GetAllPosts">
            <summary>
            To Get All Posts
            </summary>
            <response code="200">Got all posts</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:PostsController.GetPost(System.Int32)">
            <summary>
            Get Specific Post By Id
            </summary>
            <param name="id">Id of the post</param>
            <response code="200">Found the post</response>
            <response code="404">No post found</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:PostsController.CreatePost">
             <summary>
             To create post
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/v1/posts
                 {
                     "user_id": "1",
                     "caption": "Hello Guys !!",
                     "privacy": "public",
                 }
            
             </remarks>
             <response code="201">Post Created</response>
             <response code="400">Json is null</response>
             <response code="401">Unauthenticated user / Invalid or expired JWT token</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:PostsController.UpdatePost(System.Object,System.Int32)">
            <summary>
            To Update Specific Post
            </summary>
            <param name="data">New post info</param>
            <param name="id">Post id</param>
            <response code="200">Post updated successfully</response>
            <response code="401">Unauthenticated user</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:PostsController.DeletePost(System.Int32)">
            <summary>
            To Delete Specific Post
            </summary>
            <param name="id">Post id</param>
            <response code="200">Post deleted successfully</response>
            <response code="401">Unauthenticated user</response>
            <response code="500">Internal server error</response>
        </member>
        <member name="M:UsersController.GetUsers">
            <summary>
            Get All Users
            </summary>
            <response code="200">Got Users</response>
            <response code="404">No Users Found</response>
        </member>
        <member name="M:UsersController.GetUserByName(System.String)">
            <summary>
            Get Specific User By Id
            </summary>
            <response code="200">User Found</response>
            <response code="404">No User Found With That Id</response>
        </member>
        <member name="M:UsersController.CreateUser">
            <summary>
            Create User
            </summary>
            <response code="200">User Created</response>
            <response code="422">One of user's info is incorrect / body is null</response>
        </member>
        <member name="M:UsersController.DeleteUser">
            <summary>
            Delete User
            </summary>
            <remarks>authentication and authorization from cookie</remarks>
            <response code="200">User Deleted</response>
            <response code="404">No User Found With That Id</response>
        </member>
        <member name="T:backend.Migrations.Initial">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.Initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.Initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.Initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.postnotificationconfiguration">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.postnotificationconfiguration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.postnotificationconfiguration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.postnotificationconfiguration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.notification">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.notification.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.notification.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.notification.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.friends">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friends.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friends.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friends.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.reaction">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.reaction.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.reaction.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.reaction.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.story">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.story.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.story.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.story.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.citycountry">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.citycountry.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.citycountry.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.citycountry.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.friendsfeatures">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friendsfeatures.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friendsfeatures.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.friendsfeatures.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:backend.Migrations.banner">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.banner.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.banner.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:backend.Migrations.banner.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:UserService.AddUserAsync(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Do validation before adding user to database
            </summary>
            <param name="body">dictionary has user information</param>
            <returns>User that created and message</returns>
        </member>
        <member name="M:UserService.GetAllAsync(System.String)">
            <summary>
            Get all users from database
            </summary>
            <returns>if found returns users, null otherwise</returns>
        </member>
        <member name="M:UserService.Filter(System.Func{User,System.Boolean})">
            <summary>
            Filter method to filter user's by specific condition
            </summary>
            <param name="func">delegate of condition</param>
            <returns>if there any metch it returns it, null otherwise</returns>
        </member>
        <member name="M:UserService.GetByUsername(System.String,System.String)">
            <summary>
            Filter method to filter user's by specific condition
            </summary>
            <param name="username">username of the user</param>
            <param name="token">token of the logged in user</param>
            <returns>if there any metch it returns it, null otherwise</returns>
        </member>
        <member name="M:UserService.Delete(System.Int32,System.String)">
            <summary>
            It delete user from database
            </summary>
            <param name="id">id of the user</param>
            <param name="token">token of the signed in user (more secure)</param>
            <returns>returns true if successfull, false otherwise</returns>
        </member>
        <member name="M:UserService.UserLogin(System.String,System.String)">
            <summary>
            make jwt and cookie to make user log in
            </summary>
            <param name="username">User's username</param>
            <param name="password">User's password</param>
            <returns>return true and user's id if authenticated, false and default otherwise</returns>
        </member>
        <member name="M:UserService.CheckUserInfo(System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues})">
            <summary>
            Validate user's information
            </summary>
            <param name="body">Dictionary has user's info</param>
            <returns>returns enum based on user's information</returns>
        </member>
    </members>
</doc>
